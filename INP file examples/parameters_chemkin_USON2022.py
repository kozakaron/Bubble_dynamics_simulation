"""
This is an automatically generated file.
This python file contains all the numerical constants and coefficents required for the simulations.
Recommended usage:
   importing: import parameters as par
   usage: print('Universal gas constant =', par.R_g)
"""

model = 'chemkin_USON2022'
import numpy as np

"""________________________________Physical constants________________________________"""

c_L            = 1483.0                   # Liquid sound speed at 30 째C [m/s]
rho_L          = 998.2                    # Liquid density [kg/m^3]
C_p_L          = 4178.0                   # Isobar heat capacity of water [J/(kg*K)]
sigma          = 0.07197                  # Surface tension [N/m]
mu_L           = 0.001                    # Dynamic viscosity at 30 째C and 1 atm [Pa*s]
P_v            = 2338.1                   # Saturated vapour pressure at 30 째C [Pa]
alfa_M         = 0.35                     # water accommodation coefficient [-]
R_g            = 8.31446                  # Universal gas constant [J/mol/K]
R_erg          = 83144600.0               # Universal gas constant [erg/mol/K]
R_cal          = 1.987204                 # Universal gas constant [cal/mol/K]
N_A            = 6.02214e+23              # Avogadro's number [-]
h              = 6.62607015e-34           # Planck constant [m^2*kg/s]
k_B            = 1.3806487394846352e-23   # Boltzmann constant [J/K]
R_v            = 461.521126               # Specific gas constant of water [J/kg/K]
erg2J          = 1e-07                    # Conversion factor from erg to J
J2erg          = 10000000.0               # Conversion factor from J to erg
cal2J          = 4.184                    # Conversion factor from cal to J
J2cal          = 0.2390057361376673       # Conversion factor from J to cal
atm2Pa         = 101325.0                 # Conversion factor from atm to Pa
bar2Pa         = 100000.0                 # Conversion factor from bar to Pa
absolute_zero  = 273.15                   # Zero 째C in Kelvin


"""________________________________Species________________________________"""

elements = np.array(['H','O'])
#                            0,         1,         2,         3,         4,         5,         6,         7,         8,         9
species = np.array([       'O',       'H',      'H2',      'OH',      'O2',     'H2O',     'HO2',    'H2O2',      'O3',    'OHEX'])

# molar mass [g/mol]
W = np.array([         15.9994,   1.00797,   2.01594,  17.00737,   31.9988,  18.01534,  33.00677,  34.01474,   47.9982,  17.00737], dtype=np.float64)

# thermal conductivity [W / m / K]
lambdas = np.array([       0.0,       0.0,    0.1805,       0.0,   0.02658,     0.016,       0.0,    0.5863,   0.01985,       0.0], dtype=np.float64)

index = dict(
         O= 0,      H= 1,     H2= 2,     OH= 3,     O2= 4,    H2O= 5,    HO2= 6,   H2O2= 7,     O3= 8,   OHEX= 9
)

indexOfWater = 5
K = 10   # Number of species


"""________________________________NASA polynomials________________________________"""

N = 5    # degree of polynomials
TempRange = np.array([
    #   T_low   T_high    T_mid 
    [   200.0,  6000.0,  1000.0],    # O
    [   200.0,  6000.0,  1000.0],    # H
    [   200.0,  6000.0,  1000.0],    # H2
    [   200.0,  6000.0,  1000.0],    # OH
    [   200.0,  6000.0,  1000.0],    # O2
    [   200.0,  6000.0,  1000.0],    # H2O
    [   200.0,  5000.0,  1000.0],    # HO2
    [   200.0,  6000.0,  1000.0],    # H2O2
    [   200.0,  6000.0,  1000.0],    # O3
    [   300.0,  5000.0,  1000.0]     # OHEX
], dtype=np.float64)

# LOW NASA coefficients
a_low = np.array([
    #             a_1              a_2              a_3              a_4              a_5              a_6              a_7 
    [       3.1682671,  -0.00327931884,  6.64306396e-06, -6.12806624e-09,  2.11265971e-12,      29122.2592,      2.05193346],    # O
    [             2.5,             0.0,             0.0,             0.0,             0.0,        25473.66,     -0.44668285],    # H
    [      2.34433112,   0.00798052075,  -1.9478151e-05,  2.01572094e-08, -7.37611761e-12,     -917.935173,     0.683010238],    # H2
    [      3.99198424,  -0.00240106655,  4.61664033e-06, -3.87916306e-09,  1.36319502e-12,      3368.89836,    -0.103998477],    # OH
    [      3.78245636,  -0.00299673416,  9.84730201e-06, -9.68129509e-09,  3.24372837e-12,     -1063.94356,      3.65767573],    # O2
    [       4.1986352,   -0.0020364017,   6.5203416e-06,  -5.4879269e-09,    1.771968e-12,      -30293.726,     -0.84900901],    # H2O
    [      4.30179807,  -0.00474912097,  2.11582905e-05, -2.42763914e-08,  9.29225225e-12,      264.018485,       3.7166622],    # HO2
    [      4.31515149, -0.000847390622,  1.76404323e-05, -2.26762944e-08,  9.08950158e-12,     -17706.7437,      3.27373319],    # H2O2
    [      3.40738221,   0.00205379063,  1.38486052e-05, -2.23311542e-08,  9.76073226e-12,      15864.4979,       8.2824758],    # O3
    [        3.637266,     0.000185091,  -1.6761646e-06,    2.387202e-09,   -8.431442e-13,         50021.3,       1.3588605]     # OHEX
], dtype=np.float64)

# LOW NASA coefficients
a_high = np.array([
    #             a_1              a_2              a_3              a_4              a_5              a_6              a_7 
    [      2.54363697, -2.73162486e-05,  -4.1902952e-09,  4.95481845e-12, -4.79553694e-16,       29226.012,      4.92229457],    # O
    [             2.5,             0.0,             0.0,             0.0,             0.0,        25473.66,     -0.44668285],    # H
    [      2.93286575,  0.000826608026, -1.46402364e-07,  1.54100414e-11,   -6.888048e-16,     -813.065581,     -1.02432865],    # H2
    [      2.83853033,   0.00110741289, -2.94000209e-07,  4.20698729e-11,  -2.4228989e-15,      3697.80808,      5.84494652],    # OH
    [      3.66096065,  0.000656365811, -1.41149627e-07,  2.05797935e-11, -1.29913436e-15,     -1215.97718,      3.41536279],    # O2
    [       2.6770389,    0.0029731816,  -7.7376889e-07,   9.4433514e-11,  -4.2689991e-15,      -29885.894,         6.88255],    # H2O
    [      4.17228741,   0.00188117627, -3.46277286e-07,  1.94657549e-11,  1.76256905e-16,      31.0206839,      2.95767672],    # HO2
    [      4.57977305,   0.00405326003,  -1.2984473e-06,    1.982114e-10, -1.13968792e-14,     -18007.1775,     0.664970694],    # H2O2
    [      12.3302914,   -0.0119324783,  7.98741278e-06, -1.77194552e-09,  1.26075824e-13,      12675.5831,     -40.8823374],    # O3
    [         2.88273,    0.0010139743,   -2.276877e-07,    2.174683e-11,   -5.126305e-16,         50265.0,        5.595712]     # OHEX
], dtype=np.float64)


"""________________________________Reaction constants________________________________"""

I = 34    # Number of reactions
# Pre-exponential factors [cm^3/mol/s v 1/s]
A = np.array([
      5071200000000000.0,           1255400.0,          13193000.0,             84999.0,          4.9806e+18,
      6165000000000000.0,           4.714e+18,          1.4818e+24,     4650000000000.0,           2123100.0,
        57734000000000.0,    32500000000000.0,      958400000000.0,      130000000000.0,  1604800000000000.0,
                214800.0,    24100000000000.0,          9.7543e+19,           9550000.0,     1740000000000.0,
        75900000000000.0,    15000000000000.0,     5930000000000.0,     2950000000000.0,     6010000000000.0,
         1310000000000.0,     2100000000000.0,  1370000000000000.0,     4820000000000.0,    84300000000000.0,
          452000000000.0,      185000000000.0,                66.2,        6620000000.0
], dtype=np.float64)

# Temperature exponent [-]
b = np.array([
                -0.48596,             2.27039,             1.87803,             2.26419,            -1.21273,
                    -0.5,                -1.0,            -2.53792,                0.44,              2.1133,
                     0.0,                 0.0,             0.42008,                 0.0,                 0.0,
                  2.3219,                 0.0,            -1.92495,                 2.0,                 0.0,
                     0.0,                 0.0,                 0.5,                 0.5,                 0.5,
                     0.5,                 0.5,               -0.67,                 0.0,                 0.0,
                     0.0,                 0.0,                 0.0,                 0.0
], dtype=np.float64)

# Activation energy [cal/mol]
E = np.array([
             16128.31392,          6957.58464,          3151.30176,         -1784.96266,           612.09734,
                     0.0,                 0.0,           120.79791,                 0.0,          -1624.8937,
                171.0383,                 0.0,          -948.68928,         -1630.15978,         15551.03232,
             -3402.70243,          3970.40573,          9426.08448,          3970.40573,           318.03149,
              7269.73402,          5975.60976,          -860.08003,          -444.03984,           -764.0784,
              -167.02416,          -478.04083,         21201.67526,          3339.73403,           761.92249,
                     0.0,            677.8989,                 0.0,           810.86822
], dtype=np.float64)


"""________________________________Reaction matrixes________________________________"""

# Forward reaction matrix
nu_forward = np.array([
    #   O    H   H2   OH   O2  H2O  HO2 H2O2   O3 OHEX 
    [   0,   1,   0,   0,   1,   0,   0,   0,   0,   0],    #  0. H+O2=O+OH
    [   1,   0,   1,   0,   0,   0,   0,   0,   0,   0],    #  1. O+H2=H+OH
    [   0,   0,   1,   1,   0,   0,   0,   0,   0,   0],    #  2. OH+H2=H+H2O
    [   0,   0,   0,   2,   0,   0,   0,   0,   0,   0],    #  3. 2OH=O+H2O
    [   0,   2,   0,   0,   0,   0,   0,   0,   0,   0],    #  4. 2H+M=H2+M
    [   2,   0,   0,   0,   0,   0,   0,   0,   0,   0],    #  5. 2O+M=O2+M
    [   1,   1,   0,   0,   0,   0,   0,   0,   0,   0],    #  6. O+H+M=OH+M
    [   0,   1,   0,   1,   0,   0,   0,   0,   0,   0],    #  7. H+OH+M=H2O+M
    [   0,   1,   0,   0,   1,   0,   0,   0,   0,   0],    #  8. H+O2(+M)=HO2(+M)
    [   0,   1,   0,   0,   0,   0,   1,   0,   0,   0],    #  9. H+HO2=H2+O2
    [   0,   1,   0,   0,   0,   0,   1,   0,   0,   0],    # 10. HO2+H=2OH
    [   1,   0,   0,   0,   0,   0,   1,   0,   0,   0],    # 11. HO2+O=OH+O2
    [   0,   0,   0,   1,   0,   0,   1,   0,   0,   0],    # 12. HO2+OH=H2O+O2
    [   0,   0,   0,   0,   0,   0,   2,   0,   0,   0],    # 13. 2HO2=H2O2+O2
    [   0,   0,   0,   0,   0,   0,   2,   0,   0,   0],    # 14. 2HO2=H2O2+O2
    [   0,   0,   0,   2,   0,   0,   0,   0,   0,   0],    # 15. 2OH(+M)=H2O2(+M)
    [   0,   1,   0,   0,   0,   0,   0,   1,   0,   0],    # 16. H2O2+H=H2O+OH
    [   0,   1,   0,   0,   0,   0,   0,   1,   0,   0],    # 17. H2O2+H=H2+HO2
    [   1,   0,   0,   0,   0,   0,   0,   1,   0,   0],    # 18. H2O2+O=OH+HO2
    [   0,   0,   0,   1,   0,   0,   0,   1,   0,   0],    # 19. H2O2+OH=H2O+HO2
    [   0,   0,   0,   1,   0,   0,   0,   1,   0,   0],    # 20. H2O2+OH=H2O+HO2
    [   1,   1,   0,   0,   0,   0,   0,   0,   0,   0],    # 21. H+O+M=OHEX+M
    [   0,   0,   0,   0,   0,   1,   0,   0,   0,   1],    # 22. OHEX+H2O=OH+H2O
    [   0,   0,   1,   0,   0,   0,   0,   0,   0,   1],    # 23. OHEX+H2=OH+H2
    [   0,   0,   0,   1,   0,   0,   0,   0,   0,   1],    # 24. OHEX+OH=2OH
    [   0,   1,   0,   0,   0,   0,   0,   0,   0,   1],    # 25. OHEX+H=OH+H
    [   0,   0,   0,   0,   1,   0,   0,   0,   0,   1],    # 26. OHEX+O2=OH+O2
    [   0,   0,   0,   0,   0,   0,   0,   0,   1,   0],    # 27. O3(+M)=O2+O(+M)
    [   1,   0,   0,   0,   0,   0,   0,   0,   1,   0],    # 28. O3+O=O2+O2
    [   0,   1,   0,   0,   0,   0,   0,   0,   1,   0],    # 29. O3+H=O2+OH
    [   0,   1,   0,   0,   0,   0,   0,   0,   1,   0],    # 30. O3+H=O+HO2
    [   0,   0,   0,   1,   0,   0,   0,   0,   1,   0],    # 31. O3+OH=O2+HO2
    [   0,   0,   0,   0,   0,   1,   0,   0,   1,   0],    # 32. O3+H2O=O2+H2O2
    [   0,   0,   0,   0,   0,   0,   1,   0,   1,   0]     # 33. O3+HO2=OH+O2+O2
], dtype=np.float64)

# Backward reaction matrix
nu_backward = np.array([
    #   O    H   H2   OH   O2  H2O  HO2 H2O2   O3 OHEX 
    [   1,   0,   0,   1,   0,   0,   0,   0,   0,   0],    #  0. H+O2=O+OH
    [   0,   1,   0,   1,   0,   0,   0,   0,   0,   0],    #  1. O+H2=H+OH
    [   0,   1,   0,   0,   0,   1,   0,   0,   0,   0],    #  2. OH+H2=H+H2O
    [   1,   0,   0,   0,   0,   1,   0,   0,   0,   0],    #  3. 2OH=O+H2O
    [   0,   0,   1,   0,   0,   0,   0,   0,   0,   0],    #  4. 2H+M=H2+M
    [   0,   0,   0,   0,   1,   0,   0,   0,   0,   0],    #  5. 2O+M=O2+M
    [   0,   0,   0,   1,   0,   0,   0,   0,   0,   0],    #  6. O+H+M=OH+M
    [   0,   0,   0,   0,   0,   1,   0,   0,   0,   0],    #  7. H+OH+M=H2O+M
    [   0,   0,   0,   0,   0,   0,   1,   0,   0,   0],    #  8. H+O2(+M)=HO2(+M)
    [   0,   0,   1,   0,   1,   0,   0,   0,   0,   0],    #  9. H+HO2=H2+O2
    [   0,   0,   0,   2,   0,   0,   0,   0,   0,   0],    # 10. HO2+H=2OH
    [   0,   0,   0,   1,   1,   0,   0,   0,   0,   0],    # 11. HO2+O=OH+O2
    [   0,   0,   0,   0,   1,   1,   0,   0,   0,   0],    # 12. HO2+OH=H2O+O2
    [   0,   0,   0,   0,   1,   0,   0,   1,   0,   0],    # 13. 2HO2=H2O2+O2
    [   0,   0,   0,   0,   1,   0,   0,   1,   0,   0],    # 14. 2HO2=H2O2+O2
    [   0,   0,   0,   0,   0,   0,   0,   1,   0,   0],    # 15. 2OH(+M)=H2O2(+M)
    [   0,   0,   0,   1,   0,   1,   0,   0,   0,   0],    # 16. H2O2+H=H2O+OH
    [   0,   0,   1,   0,   0,   0,   1,   0,   0,   0],    # 17. H2O2+H=H2+HO2
    [   0,   0,   0,   1,   0,   0,   1,   0,   0,   0],    # 18. H2O2+O=OH+HO2
    [   0,   0,   0,   0,   0,   1,   1,   0,   0,   0],    # 19. H2O2+OH=H2O+HO2
    [   0,   0,   0,   0,   0,   1,   1,   0,   0,   0],    # 20. H2O2+OH=H2O+HO2
    [   0,   0,   0,   0,   0,   0,   0,   0,   0,   1],    # 21. H+O+M=OHEX+M
    [   0,   0,   0,   1,   0,   1,   0,   0,   0,   0],    # 22. OHEX+H2O=OH+H2O
    [   0,   0,   1,   1,   0,   0,   0,   0,   0,   0],    # 23. OHEX+H2=OH+H2
    [   0,   0,   0,   2,   0,   0,   0,   0,   0,   0],    # 24. OHEX+OH=2OH
    [   0,   1,   0,   1,   0,   0,   0,   0,   0,   0],    # 25. OHEX+H=OH+H
    [   0,   0,   0,   1,   1,   0,   0,   0,   0,   0],    # 26. OHEX+O2=OH+O2
    [   1,   0,   0,   0,   1,   0,   0,   0,   0,   0],    # 27. O3(+M)=O2+O(+M)
    [   0,   0,   0,   0,   2,   0,   0,   0,   0,   0],    # 28. O3+O=O2+O2
    [   0,   0,   0,   1,   1,   0,   0,   0,   0,   0],    # 29. O3+H=O2+OH
    [   1,   0,   0,   0,   0,   0,   1,   0,   0,   0],    # 30. O3+H=O+HO2
    [   0,   0,   0,   0,   1,   0,   1,   0,   0,   0],    # 31. O3+OH=O2+HO2
    [   0,   0,   0,   0,   1,   0,   0,   1,   0,   0],    # 32. O3+H2O=O2+H2O2
    [   0,   0,   0,   1,   2,   0,   0,   0,   0,   0]     # 33. O3+HO2=OH+O2+O2
], dtype=np.float64)

nu = nu_backward - nu_forward

reaction_order = np.array([
    [   2],    #  0. H+O2=O+OH
    [   2],    #  1. O+H2=H+OH
    [   2],    #  2. OH+H2=H+H2O
    [   2],    #  3. 2OH=O+H2O
    [   2],    #  4. 2H+M=H2+M
    [   2],    #  5. 2O+M=O2+M
    [   2],    #  6. O+H+M=OH+M
    [   2],    #  7. H+OH+M=H2O+M
    [   2],    #  8. H+O2(+M)=HO2(+M)
    [   2],    #  9. H+HO2=H2+O2
    [   2],    # 10. HO2+H=2OH
    [   2],    # 11. HO2+O=OH+O2
    [   2],    # 12. HO2+OH=H2O+O2
    [   2],    # 13. 2HO2=H2O2+O2
    [   2],    # 14. 2HO2=H2O2+O2
    [   2],    # 15. 2OH(+M)=H2O2(+M)
    [   2],    # 16. H2O2+H=H2O+OH
    [   2],    # 17. H2O2+H=H2+HO2
    [   2],    # 18. H2O2+O=OH+HO2
    [   2],    # 19. H2O2+OH=H2O+HO2
    [   2],    # 20. H2O2+OH=H2O+HO2
    [   2],    # 21. H+O+M=OHEX+M
    [   2],    # 22. OHEX+H2O=OH+H2O
    [   2],    # 23. OHEX+H2=OH+H2
    [   2],    # 24. OHEX+OH=2OH
    [   2],    # 25. OHEX+H=OH+H
    [   2],    # 26. OHEX+O2=OH+O2
    [   1],    # 27. O3(+M)=O2+O(+M)
    [   2],    # 28. O3+O=O2+O2
    [   2],    # 29. O3+H=O2+OH
    [   2],    # 30. O3+H=O+HO2
    [   2],    # 31. O3+OH=O2+HO2
    [   2],    # 32. O3+H2O=O2+H2O2
    [   2]     # 33. O3+HO2=OH+O2+O2
], dtype=np.int64)


"""________________________________Three-body reactions________________________________"""

ThirdBodyIndexes = np.array([   4,   5,   6,   7,   8,  15,  21,  27], dtype=np.int64)
ThirdBodyCount = 8

# third-body efficiency factors
alfa = np.array([
    #       O        H       H2       OH       O2      H2O      HO2     H2O2       O3     OHEX 
    [     1.0,     1.0,     2.5,     1.0,     1.0,    12.0,     1.0,     1.0,     1.0,     1.0],    #  4. 2H+M=H2+M
    [     1.0,     1.0,     2.5,     1.0,     1.0,    12.0,     1.0,     1.0,     1.0,     1.0],    #  5. 2O+M=O2+M
    [     1.0,     1.0,     2.5,     1.0,     1.0,    12.0,     1.0,     1.0,     1.0,     1.0],    #  6. O+H+M=OH+M
    [     1.0,     1.0,     2.5,     1.0,     1.0,    12.0,     1.0,     1.0,     1.0,     1.0],    #  7. H+OH+M=H2O+M
    [     1.0,     1.0,   1.511,     1.0,     1.0,  11.372,     1.0,     1.0,     1.0,     1.0],    #  8. H+O2(+M)=HO2(+M)
    [     1.0,     1.0,    2.47,     1.0,     0.8,     5.0,     1.0,    5.13,     1.0,     1.0],    # 15. 2OH(+M)=H2O2(+M)
    [     1.0,     1.0,     1.0,     1.0,     0.4,     6.5,     1.0,     1.0,     1.0,     1.0],    # 21. H+O+M=OHEX+M
    [     6.0,     1.0,     3.0,     1.0,     1.5,     1.0,     1.0,     1.0,    3.75,     1.0]     # 27. O3(+M)=O2+O(+M)
], dtype=np.float64)


"""________________________________Irreversible reactions________________________________"""

IrreversibleIndexes = np.array([], dtype=np.int64)
IrreversibleCount = 0


"""________________________________Pressure-dependent reactions________________________________"""

PressureDependentIndexes = np.array([   8,  15,  27], dtype=np.int64)
PressureDependentCount = 3

LindemannIndexes = np.array([], dtype=np.int64)
LindemannCount = 0

# Fall-off parameters
ReacConst = np.array([
    #               A_0                b_0                E_0 
    [        5.2669e+19,          -1.37367,               0.0],    #  8. H+O2(+M)=HO2(+M)
    [        1.9928e+18,          -1.17797,      -4273.096032],    # 15. 2OH(+M)=H2O2(+M)
    [         2.275e+28,             -4.37,       22267.86768]     # 27. O3(+M)=O2+O(+M)
], dtype=np.float64)

TroeIndexes = np.array([   8,  15,  27], dtype=np.int64)
TroeCount = 3

# Troe parameters
Troe = np.array([
    #              alfa               T***                 T*                T** 
    [              0.67,             1e-30,             1e+30,             1e+30],    #  8. H+O2(+M)=HO2(+M)
    [              0.43,             1e-30,             1e+30,             1e+30],    # 15. 2OH(+M)=H2O2(+M)
    [            0.6417,          0.000391,           8680.74,           6060.75]     # 27. O3(+M)=O2+O(+M)
], dtype=np.float64)

SRIIndexes = np.array([], dtype=np.int64)
SRICount = 0

# SRI parameters
SRI = np.array([
    #                 a                  b                  c                  d                  e 
    [] 
], dtype=np.float64)

PlogIndexes = np.array([], dtype=np.int64)
PlogStart = np.array([   0], dtype=np.int64)
PlogStop = np.array([   1], dtype=np.int64)
PlogCount = 0

# PLOG parameters
Plog = np.array([
    #               P_1                A_1                b_1                E_1 
    [] 
], dtype=np.float64)

